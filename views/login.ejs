<!DOCTYPE html>
<html>
  <head>
    <title>DC Monitor 2</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/jquery.datetimepicker.css">
    <link rel="stylesheet" href="/styles/semantic.min.css">
    <link rel="stylesheet" href="/styles/sweetalert.css">
    <!--STYLES END-->

    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery.min.js"></script>
    <script src="/js/dependencies/moment.min.js"></script>
    <script src="/js/dependencies/async.js"></script>
    <script src="/js/dependencies/dygraph-combined.js"></script>
    <script src="/js/dependencies/jquery.datetimepicker.js"></script>
    <script src="/js/dependencies/knockout.js"></script>
    <script src="/js/dependencies/lodash.min.js"></script>
    <script src="/js/dependencies/moment-ru.js"></script>
    <script src="/js/dependencies/semantic.min.js"></script>
    <script src="/js/dependencies/smooth-plotter.js"></script>
    <script src="/js/dependencies/sweetalert.min.js"></script>
    <script src="/js/dependencies/trianglify.min.js"></script>
    <!--SCRIPTS END-->

  </head>

  <body id="loginPage" style="padding-top: 15% !important;">
    <canvas class="tranglify" id="tranglify"></canvas>
    <div class="ui middle aligned three column centered doubling grid" style="width:99.9% !important; height: 100%;">
        <div class="row" style="height: 100%;">
            <div class="column">
                <%- body %>
            </div>
        </div>
    </div>

    <div class="ui small modal" id="loginModal">
        <i class="close icon"></i>
        <div class="header"></div>
        <div class="content"><div class="description"></div></div>
        <div class="actions">
            <div class="ui button"><%= __('Cancel') %></div>
        </div>
    </div>
    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->

    <script type="text/javascript">

    var pattern = Trianglify({
        width: window.innerWidth,
        height: window.innerHeight
    });
    pattern.canvas(document.getElementById('tranglify'));

    var loginViewModel = function(){
        var self = this;

        this.errors    = ko.observableArray();


    };

    ko.applyBindings(new loginViewModel(), document.getElementById("loginPage"));
    </script>
  </body>
</html>
