<!DOCTYPE html>
<html>
  <head>
    <title>DC Monitor 2</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/jquery.datetimepicker.css">
    <link rel="stylesheet" href="/styles/semantic.min.css">
    <!--STYLES END-->

    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery.min.js"></script>
    <script src="/js/dependencies/moment.min.js"></script>
    <script src="/js/dependencies/dygraph-combined.js"></script>
    <script src="/js/dependencies/jquery.datetimepicker.js"></script>
    <script src="/js/dependencies/knockout.js"></script>
    <script src="/js/dependencies/lodash.min.js"></script>
    <script src="/js/dependencies/moment-ru.js"></script>
    <script src="/js/dependencies/semantic.min.js"></script>
    <script src="/js/dependencies/smooth-plotter.js"></script>
    <!--SCRIPTS END-->

  </head>

  <body>
    <div class="ui fixed main menu menu-shadow" id="topMenu">
        <div class="header item">
            DC Monitor 2
        </div>
        <!-- ko if: commonStatus() -->
        <div class="item" data-bind="foreach: {data: commonStatus().sensors(), as: 'state'}">
            <i class="dashboard icon"></i>
            <div class="ui label" data-bind="css: {'green': state.status == 'ok'}">
                <i class="icon" data-bind="css: {'check': state.status == 'ok'}"></i>
                <span data-bind="text: state.num"></span>
            </div>
        </div>
        <!-- /ko -->
    </div>
    <%- partial ('elements/sidebar.ejs') %>
    <div class="ui black big launch right attached fixed button" id="sidebarToggle">
        <i class="content icon"></i>
        <span class="text"><%= __('Menu') %></span>
    </div>

    <div class="ui padded grid pusher" style="padding-top: 40px;">
        <div class="row">
            <div class="one wide column">

            </div>
            <div class="fifteen wide column">
                <%- body %>
            </div>
        </div>
    </div>

    <div class="ui small modal" id="mainModal">
        <i class="close icon"></i>
        <div class="header"></div>
        <div class="content"><div class="description"></div></div>
        <div class="actions">
            <div class="ui button"><%= __('Cancel') %></div>
        </div>
    </div>
    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->

    <!--TEMPLATES END-->

    <script type="text/javascript">
        $('#sidebar').sidebar();
        $('#sidebarToggle').click(function(){
            $('#sidebar').sidebar('toggle');
        });

    var topMenuViewModel = function(){
        var self = this;

        this.errors = ko.observableArray();
        this.commonStatus = ko.observable(false);

        io.socket.on('connect', function(){
            io.socket.get('/notifications/subscribe/statusUpdates');
        });

        io.socket.on('statusUpdates',function(obj){
          if (obj.verb == 'messaged') {
            self.loadStates();
          } else {
            console.log(obj);
          }
        });

        this.loadStates = function(){
            var self = this;

            io.socket.get('/equipment/getCommonStatus', function(data, jwr){
                if (jwr.statusCode == 200){
                    var states = {};
                    if (data.error){
                        self.errors.push(data.error);
                    } else {
                        _.forIn(data.result, function(value, key){
                            states[key] = ko.observableArray(value);
                        });

                        self.commonStatus(states);
                    }
                } else {
                    self.errors.push('ERROR: ' + jwr.statusCode);
                }
console.log(self.commonStatus().sensors());
            });

        }.bind(this);

        this.loadStates();

    };

    ko.applyBindings(new topMenuViewModel(), document.getElementById("topMenu"));
    </script>
  </body>
</html>
