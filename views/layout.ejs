<!DOCTYPE html>
<html>
  <head>
    <title>DC Monitor 2</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/jquery.datetimepicker.css">
    <link rel="stylesheet" href="/styles/semantic.min.css">
    <link rel="stylesheet" href="/styles/sweetalert.css">
    <!--STYLES END-->

    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery.min.js"></script>
    <script src="/js/dependencies/moment.min.js"></script>
    <script src="/js/dependencies/async.js"></script>
    <script src="/js/dependencies/dygraph-combined.js"></script>
    <script src="/js/dependencies/jquery.datetimepicker.js"></script>
    <script src="/js/dependencies/knockout.js"></script>
    <script src="/js/dependencies/lodash.min.js"></script>
    <script src="/js/dependencies/moment-ru.js"></script>
    <script src="/js/dependencies/semantic.min.js"></script>
    <script src="/js/dependencies/smooth-plotter.js"></script>
    <script src="/js/dependencies/sweetalert.min.js"></script>
    <script src="/js/dependencies/trianglify.min.js"></script>
    <!--SCRIPTS END-->

  </head>

  <body>
    <div class="ui fixed main menu menu-shadow" id="topMenu">
        <div class="header item">
            <i class="icon" data-bind="css: {'green circle': connected, 'red warning sign': connected() === false }"></i>
            DC Monitor 2
        </div>
        <!-- ko if: commonStatus() -->
        <div class="item">
            <!-- ko foreach: {data: commonStatus().power, as: 'state'} -->
            <div class="ui label" data-bind="css: $root.statusColor(state.status)">
                <i class="power icon"></i>
                <span data-bind="text: state.num"></span>
            </div>
            <!-- /ko -->
        </div>
        <div class="item">
            <i class="dashboard icon"></i>
            <!-- ko foreach: {data: commonStatus().sensors, as: 'state'} -->
            <div class="ui label" data-bind="css: $root.statusColor(state.status)">
                <i class="icon" data-bind="css: $root.statusIcon(state.status)"></i>
                <span data-bind="text: state.num"></span>
            </div>
            <!-- /ko -->
        </div>
        <div class="item">
            <i class="mail icon"></i>
            <!-- ko foreach: {data: commonStatus().events, as: 'state'} -->
            <div class="ui label" data-bind="css: $root.statusColor(state.status)">
                <i class="icon" data-bind="css: $root.statusIcon(state.status)"></i>
                <span data-bind="text: _.capitalize(state.status)"></span>
                <span data-bind="text: state.num"></span>
            </div>
            <!-- /ko -->
        </div>

        <!-- /ko -->

        <div class="right menu">
            <div class="ui topmenu dropdown item" data-bind="if: me">
                <i class="user icon"></i>
                <span data-bind="text: me().username"></span>
                <i class="dropdown icon"></i>
                <div class="menu">
                    <div class="header text item">
                       <%= __('Profile') %>
                    </div>
                    <div class="text item">
                        <div class="ui list">
                            <div class="item">
                                <i class="circle icon"></i>
                                <div class="content">
                                    ID <span data-bind="text: me().id"></span>
                                </div>

                            </div>
                            <div class="item">
                                <i class="user icon"></i>
                                <div class="content">
                                    <span data-bind="text: me().first_name"></span>
                                    <span data-bind="text: me().last_name"></span>
                                </div>
                            </div>
                            <div class="item">
                                <i class="envelope icon"></i>
                                <div class="content">
                                    <span data-bind="text: me().email"></span>
                                </div>
                            </div>
                            <div class="item">
                                <i class="unlock alternate icon"></i>
                                <div class="content">
                                    <span data-bind="text: me().group.description"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="ui topmenu dropdown item">
                <i class="flag icon"></i>
                <i class="dropdown icon"></i>
                <div class="menu" data-bind="foreach: langs">
                    <a class="item" data-bind="text: name, event: {click: $root.selectLang.bind($data)}, css: {blue: $root.currentLang == id}"></a>
                </div>
            </div>
            <a class="ui item" href="/logout">
              <%= __('Logout') %>
              <i class="sign out icon"></i>
            </a>
        </div>
    </div>
    <%- partial ('elements/sidebar.ejs') %>
    <div class="ui black big launch right attached fixed button" id="sidebarToggle">
        <i class="content icon"></i>
        <span class="text"><%= __('Menu') %></span>
    </div>

    <div class="ui padded grid pusher" style="padding-top: 40px;">
        <div class="row">
            <div class="one wide column">

            </div>
            <div class="fifteen wide column">
                <%- body %>
            </div>
        </div>
    </div>

    <div class="ui small modal" id="mainModal">
        <i class="close icon"></i>
        <div class="header"></div>
        <div class="content"><div class="description"></div></div>
        <div class="actions">
            <div class="ui button"><%= __('Cancel') %></div>
        </div>
    </div>
    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->

    <script type="text/javascript">
        $('#sidebar').sidebar();
        $('#sidebarToggle').click(function(){
            $('#sidebar').sidebar('toggle');
        });
        $('.topmenu.dropdown').dropdown({action: 'hide'});

    var topMenuViewModel = function(){
        var self = this;

        this.errors    = ko.observableArray();
        this.connected = ko.observable(false);
        this.commonStatus = ko.observable(false);
        this.me        = ko.observable(false);

        this.langs     = <%- JSON.stringify(HelperService.langsArray()) %>;
        this.currentLang = "<%- req.session.lang %>";

        this.statusIcon = function(status){
            if (status == 'ok'){
                return 'check';
            } else if (status == 'warn'){
                return 'warning circle';
            } else {
                return 'warning sign';
            }
        };

        this.statusColor = function(status){
            var self = this;

            if (self.connected()){
                if (status == 'ok' || status == 'on'){
                    return 'green';
                } else if (status == 'warn' || status == 'off'){
                    return 'orange';
                } else {
                    return 'red';
                }
            } else {
                return '';
            }
        }.bind(this);

        this.selectLang = function(lang){
            var self = this;

            io.socket.get('/user/lang', {lang: lang.id}, function(data, jwr){
                if (jwr.statusCode == 200){
                    window.location.reload(true);
                } else if (jwr.statusCode == 401){
                    window.location.href = "/login";
                } else {
                    self.errors.push('ERROR: ' + jwr.statusCode);
                }
            });

        }.bind(this);

        io.socket.on('connect', function(){
            self.connected(true);
            self.loadStates();
            io.socket.get('/notifications/subscribe/statusUpdates', {'connection': 'layout'});
            swal.close();
        });

        io.socket.on('connect_error',function(obj){

            console.log('connect_error');
            console.log(obj);

        });

        io.socket.on('disconnect', function(){
            self.connected(false);
            swal("Oops!", "<%= __('Lost connection to server') %>", "error");
        });

        io.socket.on('statusUpdates',function(obj){
            console.log(obj);
            self.loadStates();
        });

        this.loadStates = function(){
            var self = this;

            io.socket.get('/equipment/getCommonStatus', function(data, jwr){
                if (jwr.statusCode == 200){
                    var states = {};
                    if (data.error){
                        self.errors.push(data.error);
                    } else {
                        self.commonStatus(data.result);
                    }
                } else if (jwr.statusCode == 401){
                    window.location.href = "/login";
                } else {
                    self.errors.push('ERROR: ' + jwr.statusCode);
                }
            });

            io.socket.get('/user/me', function(data, jwr){
                if (jwr.statusCode == 200){
                    self.me(data);
                } else if (jwr.statusCode == 401){
                    window.location.href = "/login";
                } else {
                    self.errors.push('ERROR: ' + jwr.statusCode);
                }
            });

        }.bind(this);

    };

    ko.applyBindings(new topMenuViewModel(), document.getElementById("topMenu"));
    </script>
  </body>
</html>
