<div id="monitorPage">
    <h3 class="ui blue dividing header">
        <i class="dashboard icon"></i>
        <div class="content">
            <%= __('Equipment monitoring') %>
        </div>
    </h3>
    <div class="ui inverted teal small menu" data-bind="foreach: {data: dcs, as: 'dc'}">
        <a class="item" data-bind="event: {click: $root.selectDc.bind($data)}, css: {'active': $root.selectedDc() == dc.id}">
            <span data-bind="text: dc.name"></span>
            <div class="text" data-bind="text: dc.description"></div>
        </a>
    </div>
    <div class="ui divided equal height grid">
        <div class="ui row">
            <div class="three wide column">
                <div class="ui segment" data-bind="visible: racks().length == 0">
                    <%= __('No Rackmounts') %>
                </div>
                <div class="ui small divided list" data-bind="foreach: {data: racks, as: 'rack'}">
                    <div class="item" data-bind="event: {click: $root.selectRack.bind($data)}">
                        <div class="content">
                            <div class="header" data-bind="text: rack.name"></div>
                            <div class="description" data-bind="text: rack.description"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="three wide column">
                <div class="ui segment" data-bind="visible: eqs().length == 0">
                    <%= __('No Equipment') %>
                </div>
                <div class="ui small divided selection list" data-bind="foreach: {data: eqs, as: 'eq'}">
                    <div class="item" data-bind="event: {click: $root.selectEq.bind($data, $index())}, css: {'active': Number($root.selectedEq()) == $index()}">
                        <div class="content">
                            <div class="header">
                                <i class="icon circle" data-bind="css: {'green': eq.power_state == 'on', 'thin': eq.power_state == 'off'}, attr: {'title': $root.powerStatesByType[eq.power_state]}"></i>
                                <span data-bind="text: eq.name"></span>
                            </div>
                            <i data-bind="visible: Number($root.selectedEq()) == $index()" class="arrow right floated medium icon"></i>
                            <div class="description" data-bind="text: eq.address"></div>
                            <i class="circular small inverted icon" data-bind="css: $root.monitoringIcon(eq.monitoring_enable)"></i>
                            <i class="circular small inverted dashboard icon" data-bind="css: $root.eqStatusColor($data, 'sensor_status')"></i>
                            <i class="circular small green inverted envelope icon" data-bind="css: $root.eqStatusColor($data, 'event_status')"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="ten wide column">
                <div class="ui segment" data-bind="visible: eqs().length == 0 && racks().length == 0">
                    <%= __('Click Rackmount or Equipment on the left to see events and graphs') %>
                </div>
                <!-- ko if: selectedEq() >= 0 -->
                    <div data-bind="template: {name: 'eq-template', data: $root.eqs()[$root.selectedEq()], as: 'eq'}"></div>
                <!-- /ko -->
                <!-- ko if: selectedEq() < 0 && selectedRack() >= 0 -->
                    <div data-bind="template: {name: 'rack-template', data: $root.racks()[$root.selectedRack()], as: 'rack'}"></div>
                <!-- /ko -->
            </div>
        </div>
    </div>
    <div class="ui small modal" id="commentModal">
        <i class="close icon"></i>
        <div class="header"><%= __('Add comment to event') %></div>
        <div class="content" data-bind="if: commentModalData">
            <div class="description" data-bind="template: {data: commentModalData,
                                                           name: 'comment-form'}"></div>
        </div>
        <div class="actions">
            <div class="ui button"><%= __('Close') %></div>
        </div>
    </div>
</div>
<script type="text/html" id="comment-form">
    <div class="ui icon message" data-bind="css: $root.eqEventColor(_type, false)">
        <i class="icon" data-bind="css: $root.eventIcon(_type)"></i>
        <div class="content">
            <div class="header" data-bind="text: _.capitalize(_type)"></div>
            <span data-bind="text: moment(_source['@timestamp']).format('HH:mm:ss DD/MM/YY')"></span>
            <p data-bind="text: _source['@message']"></p>
        </div>
    </div>
    <!-- ko if: _source.comment().length == 0 -->
    <div class="ui segment">
        <%= __('No comments yet') %>
    </div>
    <!-- /ko -->
    <div class="ui comments">
    <!-- ko foreach: _source.comment() -->
        <div class="comment">
            <div class="content">
                <a class="author" data-bind="text: username"></a>
                <div class="metadata">
                    <div class="date" data-bind="text: moment(timestamp).format('HH:mm:ss DD/MM/YY')"></div>
                </div>
                <div class="text" data-bind="text: _.unescape(comment)"></div>
            </div>

        </div>
    <!-- /ko -->
        <div class="ui reply form">
            <div class="field">
              <textarea data-bind="value: $root.newComment"></textarea>
            </div>
            <button data-bind="event: {click: $root.saveComment.bind(false)}" class="ui primary submit labeled icon button">
                <i class="icon edit"></i> <%= __('Add Comment') %>
            </button>
        </div>
    </div>
</script>
<script type="text/html" id="rack-template">
    <div class="ui dividing header">
        <div class="content">
            ID <span data-bind="text: rack.id"></span>:
            <span data-bind="text: rack.name"></span>,
            <div class="sub header">
               <span data-bind="text: rack.description"></span>
            </div>
        </div>
    </div>
    <!-- ko template: 'filter-template' --><!-- /ko -->
    <div data-bind="template: {name: 'events-item-template'}"></div>
</script>
<script type="text/html" id="eq-template">
    <div class="ui dividing header">
        <div class="content">
            ID <span data-bind="text: eq.id"></span>:
            <span data-bind="text: eq.name"></span>,
            <span data-bind="text: eq.description"></span>
            <div class="sub header">
               <span data-bind="text: $root.eqTypesByType[eq.type]"></span>,
               <span data-bind="text: eq.address"></span>
            </div>
        </div>
    </div>
    <div class="ui menu">
        <a class="item">
            <i class="undo icon"></i> <%= __('Reset state') %>
        </a>
        <div class="right menu">
            <div class="header item">
                Power
            </div>
            <a class="item">
                <i class="play icon"></i> <%= __('Power.Action.On') %>
            </a>
            <a class="item">
                <i class="stop icon"></i> <%= __('Power.Action.Off') %>
            </a>
            <a class="item">
                <i class="repeat icon"></i> <%= __('Power.Action.Reset') %>
            </a>
            <a class="item">
                <i class="refresh icon"></i> <%= __('Power.Action.Cycle') %>
            </a>
            <a class="item">
                <i class="radio icon"></i> <%= __('Power.Action.Soft.Shutdown') %>
            </a>
        </div>
    </div>
    <!-- ko template: 'filter-template' --><!-- /ko -->
    <div class="ui fluid two item tabular menu">
        <a class="item" data-bind="event: {click: $root.showEvents.bind($data)}, css: {active: $root.detailsTab() == 'events'}"><%= __('Events') %></a>
        <a class="item"  data-bind="event: {click: $root.showSensors.bind($data, eq.id)}, css: {active: $root.detailsTab() == 'sensors'}"><%= __('Sensors data') %></a>
    </div>
    <!-- ko if: $root.detailsTab() == 'events' -->
    <div data-bind="template: {name: 'events-item-template'}"></div>
    <!-- /ko -->
    <!-- ko if: $root.detailsTab() == 'sensors' -->
    <div data-bind="template: {name: 'graph-item-template', foreach: $root.eqGraphs, as: 'graph', afterRender: $root.renderGraph}"></div>
    <!-- /ko -->
</script>
<script type="text/html" id="filter-template">
    <div class="ui form segment">
        <div class="six fields" data-bind="visible: $root.detailsTab() == 'events'">
            <div class="ui small blue dividing header"><%= __('Log level filter') %></div>
            <div class="field">
                <div class="ui checkbox">
                    <input type="checkbox" value="info" id="infoCheck" data-bind="checked: $root.logLevels">
                    <label for="infoCheck"><%= __('Info') %></label>
                </div>
            </div>
            <div class="field">
                <div class="ui checkbox">
                    <input type="checkbox" value="warn" id="warnCheck" data-bind="checked: $root.logLevels">
                    <label for="warnCheck"><%= __('Warning') %></label>
                </div>
            </div>
            <div class="field">
                <div class="ui checkbox">
                    <input type="checkbox" value="error" id="errorCheck" data-bind="checked: $root.logLevels">
                    <label for="errorCheck"><%= __('Error') %></label>
                </div>
            </div>
            <div class="field">
                <div class="ui checkbox">
                    <input type="checkbox" value="alert" id="alertCheck" data-bind="checked: $root.logLevels">
                    <label for="alertCheck"><%= __('Alert') %></label>
                </div>
            </div>
            <div class="field">
                <div class="ui checkbox">
                    <input type="checkbox" value="crit" id="critCheck" data-bind="checked: $root.logLevels">
                    <label for="critCheck"><%= __('Critical') %></label>
                </div>
            </div>
            <div class="field">
                <div class="ui checkbox">
                    <input type="checkbox" value="emerg" id="emergCheck" data-bind="checked: $root.logLevels">
                    <label for="emergCheck"><%= __('Emergency') %></label>
                </div>
            </div>
        </div>

        <div class="three fields">
            <div class="ui small blue dividing header"><%= __('Date/Time filter') %></div>
            <div class="field">
                <label><%= __('Query data from:') %></label>
                <input id="minTime" data-bind="value: $root.minQueryDate"></input>
            </div>
            <div class="field">
                <label><%= __('To:') %></label>
                <input id="maxTime" data-bind="value: $root.maxQueryDate"></input>
            </div>
            <div class="field">
                <label>&nbsp;</label>
                <button data-bind="event: {click: $root.filter.bind($data)}" class="ui primary button"><%= __('Refresh') %></button>
                <button data-bind="event: {click: $root.resetFilter.bind($data)}" class="ui button"><%= __('Reset') %></button>
            </div>
        </div>
    </div>
</script>
<script type="text/html" id="events-item-template">
    <div class="ui segment" data-bind="visible: $root.events().length == 0">
        <%= __('No events found') %>
    </div>
    <table class="ui very compact small table" data-bind="visible: $root.events().length > 0">
        <tbody data-bind="foreach: {data: $root.events, as: 'event'}">
            <tr data-bind="css: $root.eqEventColor(event._type, event._source.confirmed())">
                <td data-bind="text: moment(event._source['@timestamp']).format('HH:mm:ss DD/MM/YY')" class="three wide"></td>
                <td data-bind="text: $root.statusByType[event._type]"></td>
                <td data-bind="text: event._source['@message']"></td>
                <td class="three wide">
                    <div class="mini icon ui buttons">
                        <div title="<%= __('Confirm') %>" data-bind="event: {click: $root.eventConfirm.bind($data)}" class="ui button">
                            <i class="check icon" data-bind="css: {'green': event._source.confirmed}"></i>
                        </div>
                        <div title="<%= __('Leave comment') %>" data-bind="event: {click: $root.eventComment.bind($data)}" class="ui button">
                            <i class="comment icon" data-bind="css: {'green': event._source.comment().length > 0}"></i>
                        </div>
                        <div title="<%= __('Delete') %>" data-bind="event: {click: $root.eventDelete.bind($data)}" class="ui button">
                            <i class="remove red icon"></i>
                        </div>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</script>
<script type="text/html" id="graph-item-template">
    <div class="ui horizontal divider" data-bind="text: $root.graphName(graph.name)"></div>
    <div data-bind="attr: {'id': 'graph-' + name}"></div>
</script>
<script type="text/javascript">
    var monitorEqViewModel = function(){
        var self = this;

        this.connected    = ko.observable(false);
        this.confirmActions = ko.observable(true);
        this.errors       = ko.observableArray();
        this.modalErrors  = ko.observableArray();
        this.loading      = ko.observable(false);
        this.dcs          = ko.observableArray();
        this.selectedDc   = ko.observable(false);
        this.racks        = ko.observableArray();
        this.selectedRack = ko.observable(-1);
        this.viewedRacks  = ko.observableArray();
        this.eqs          = ko.observableArray();
        this.selectedEq   = ko.observable(-1);
        this.events       = ko.observableArray();  // Found events by criteria
        this.eventsParams = ko.observable(false);  // Params of found events like 'total' found
        this.eqGraphs     = ko.observableArray();
        this.sensorsParams = ko.observable(false);
        this.detailsTab   = ko.observable('events');
        this.commentModalData = ko.observable(false);
        this.newComment = ko.observable("");

        // Filter params
        this.minQueryDate = ko.observable(moment().subtract(2, 'hours').format('YYYY-MM-DD HH:mm'));
        this.maxQueryDate = ko.observable(moment().format('YYYY-MM-DD HH:mm'));
        this.eventsRange  = ko.observable('last'); // Either request events by date range or last ones: 'last' or 'filter'
        this.logLevels    = ko.observableArray(['emerg', 'alert', 'crit', 'warn', 'error']);



        this.eqTypesByType     = <%- JSON.stringify(HelperService.eqTypesByType(req)) %>;
        this.protocolsByname   = <%- JSON.stringify(HelperService.protocolsByname(req)) %>;
        this.powerStatesByType = <%- JSON.stringify(HelperService.powerStatesByType(req)) %>;
        this.statusByType      = <%- JSON.stringify(HelperService.statusByType(req)) %>;
        this.vendors           = <%- JSON.stringify(sails.config.dcmon.vendors) %>;
        this.vendorsByName     = <%- JSON.stringify(HelperService.vendorsByName()) %>;
        this.yesNo             = <%- JSON.stringify(HelperService.yesNoArray(req)) %>;

        this.plot = [];

        this.selectDc = function(dc){
            var self = this;

            self.selectedEq(-1);
            self.eqs.removeAll();
            self.racks([]);
            self.selectedDc(dc.id);
            var racks = [];
            $.each(dc.racks, function(index, item){
                item.errors = ko.observable(0);
                item.warning = ko.observable(0);
                racks.push(item);
            });


            self.racks(racks);

            if (self.selectedRack() < 0){
                self.selectRack(self.racks()[0]);
            }

        }.bind(this);

        this.selectRack = function(rack){
            var self = this;

            self.selectedEq(-1);
            self.detailsTab('events');
            self.eqs.removeAll();

            self.selectedRack(self.racks.indexOf(rack));

            var eqQuery = {sort: 'name'};

            io.socket.get('/rackmount/' + rack.id + '/equipments', eqQuery, function(data, jwr){

                if (jwr.statusCode == 200){
                    var eqs = [];

                    if (data !== undefined && data.length > 0){
                        _.forEach(data, function(item){
                            eqs.push(ko.observable(item));
                        });
                    }

                    self.eqs(eqs);

                    self.loadEvents();
                } else if (jwr.statusCode == 401){
                    window.location.href = "/login";
                } else {
                    self.errors.push('ERROR: ' + jwr.statusCode);
                }
            });

        }.bind(this);

        this.selectEq = function(index, eq){
            var self = this;

            self.selectedEq(index);

            if (self.detailsTab() == 'sensors'){
                self.eqGraphs([]);
                self.loadGraphs(eq.id);
            } else if (self.detailsTab() == 'events'){
                self.events([]);
                self.loadEvents();
            }

            $('#minTime').datetimepicker({
                format: 'Y-m-d H:i',
                lang: 'en' // TODO: Take lang from session
            });

            $('#maxTime').datetimepicker({
                format: 'Y-m-d H:i',
                lang: 'en'
            });

        }.bind(this);

        this.showSensors = function(id){
            this.detailsTab('sensors');
            this.loadGraphs(id);
        }.bind(this);

        this.showEvents = function(){
            this.detailsTab('events');
            this.loadEvents();
        }.bind(this);

        this.loadGraphs = function(){
            var self = this;

            var graphQuery = {from: self.minQueryDate(), to: self.maxQueryDate()};
            var eq = self.eqs()[self.selectedEq()]();

            io.socket.get('/equipment/graphs/' + eq.id, graphQuery, function(data, jwr){

                if (jwr.statusCode == 200){
                    eq = self.eqs()[self.selectedEq()]();
                    self.sensorsParams(eq.sensors_params);
                    self.eqGraphs(data.sensors);
                } else if (jwr.statusCode == 401){
                    window.location.href = "/login";
                } else {
                    self.errors.push('ERROR: ' + jwr.statusCode);
                }
            });

        }.bind(this);

        this.renderGraph = function(element, item){

            storeName = _.words(item.name, /[^\.]+/g)[1];
            sensor = this.sensorsParams()[storeName];

            points = _.transform(item.points, function(result, point){
                if (point[1] > sensor.max){
                    sensor.max = point[1];
                } else if (point[1] < sensor.min) {
                    sensor.min = point[1];
                }
                return result.push([ new Date(point[0]*1000), point[1]]);
            });

            smoothPlotter.smoothing = 0.8;

            new Dygraph(element[3],
              points,
              {
                labels: [ "<%= __('Date/Time') %>", sensor.units ],
                ylabel: sensor.units,
                height: 200,
                axes: {
                    x: {
                      gridLineWidth: 1,
                      drawGrid: true
                    },
                },
                connectSeparatedPoints: false,
                //stepPlot: true,
                valueRange: [sensor.min, sensor.max],
                //plotter: smoothPlotter
              });

        }.bind(this);

        this.graphName = function(name){
            storeName = _.words(name, /[^\.]+/g)[1];
            return this.sensorsParams()[storeName].origName;
        }.bind(this);

        this.loadEvents = function(){
            var self = this;
            var eq, eventsQuery;

            self.events.removeAll(); // Clear current

            if (self.selectedEq() >= 0){
                eq = self.eqs()[self.selectedEq()]();
                eventsQuery = {by: 'host', param: eq.address};
            } else {
                console.log(self.selectedRack());
                eventsQuery = {by: 'rack', param: self.racks()[self.selectedRack()].id};
            }

            eventsQuery.limit = 100;
            if (self.eventsRange() == 'filter'){
                eventsQuery.from   = self.minQueryDate();
                eventsQuery.to     = self.maxQueryDate();
                eventsQuery.levels = self.logLevels();
            }

            io.socket.get('/equipment/events', eventsQuery, function(data, jwr){
                if (jwr.statusCode == 200){
                    if (data.result !== null){
                        self.eventsParams({total: data.result.total});
                        if (Number(data.result.total) > 0){
                            _.forEach(data.result.hits, function(hit){
                                hit._source.comment   = ko.observableArray(hit._source.comment);
                                hit._source.confirmed = ko.observable(hit._source.confirmed);
                            });

                            self.events(data.result.hits);
                        }
                    }
                } else if (jwr.statusCode == 401){
                    window.location.href = "/login";
                } else {
                    self.errors.push('ERROR: ' + jwr.statusCode);
                }
            });

        }.bind(this);

        this.eventConfirm = function(event){
            var self = this;

            if (event._source.confirmed() === false || event._source.confirmed() === undefined){
                io.socket.get('/events/confirm/' + event._type + '/' + event._id, function(answer, jwr){
                    if (jwr.statusCode == 200){
                        if (answer.result == 'ok'){
                            event._source.confirmed(true);
                        } else if (answer.error){
                            self.errors.push(answer.error);
                        }
                    } else if (jwr.statusCode == 401){
                        window.location.href = "/login";
                    } else {
                        self.errors.push('ERROR: ' + jwr.statusCode);
                    }
                });
            }

        }.bind(this);

        // Confirmation for delete action
        this.eventDelete = function(event){
            var self = this;

            if (self.confirmActions() === true){
                swal({  title: "<%= __('Delete the event?') %>",
                        text: "   <div class='ui checkbox'><input type='checkbox'  id='dontConfirmCheck'/><label for='dontConfirmCheck'><%= __('Do not ask me more (until this window refreshed)') %></label> </div>",
                        type: "warning",
                        confirmButtonText: "<%= __('Yes, delete it') %>",
                        cancelButtonText: "<%= __('Cancel') %>",
                        html: true,
                        showCancelButton: true },
                    function(){
                        if ($('#dontConfirmCheck').prop('checked')){
                            self.confirmActions(false);
                        }

                        self.eventDeleteAction(event);
                    });
            } else {
                self.eventDeleteAction(event);
            }
        }.bind(this);

        this.eventDeleteAction = function(event){
            var self = this;

            io.socket.get('/events/delete/' + event._type + '/' + event._id, function(answer, jwr){
                if (jwr.statusCode == 200){
                    self.events.remove(event);
                } else if (jwr.status == 400 && answer.error){
                    self.errors.push(answer.error);
                } else if (jwr.statusCode == 401){
                    window.location.href = "/login";
                } else {
                    self.errors.push('ERROR: ' + jwr.statusCode);
                }
            });

        }.bind(this);

        this.eventComment = function(event){
            var self = this;

            self.commentModalData(event);
            self.newComment("");

            $('#commentModal').modal({onHide: function(){
                                        self.newComment("");
                                        self.commentModalData(false);
                                        }
                                }).modal('show').modal('refresh');

        }.bind(this);

        this.saveComment = function(){
            var self = this;
            if (self.newComment().length > 0){
                io.socket.get('/events/comment/' + self.commentModalData()._type + '/' + self.commentModalData()._id,
                              {comment: self.newComment()},
                    function(answer, jwr){
                        if (jwr.statusCode == 200){
                            self.newComment("");
                            self.commentModalData()._source.comment(answer._source.comment);
                        } else if (jwr.status == 400 && answer.error){
                            self.errors(answer.error);
                        } else if (jwr.statusCode == 401){
                            window.location.href = "/login";
                        } else {
                            self.errors.push('ERROR: ' + jwr.statusCode);
                        }
                });
            }
        }.bind(this);

        this.filter = function(index){
            var self = this;

            if (self.detailsTab() == 'events'){
                self.eventsRange('filter');
                self.loadEvents();
            } else if (self.detailsTab() == 'sensors'){
                self.loadGraphs();
            }

        }.bind(this);

        this.resetFilter = function(index){
            this.eventsRange('last');
            this.minQueryDate(moment().subtract(2, 'hours').format('YYYY-MM-DD HH:mm'));
            this.maxQueryDate(moment().format('YYYY-MM-DD HH:mm'));
            this.logLevels(['emerg', 'alert', 'crit', 'warn', 'error']);

            if (self.detailsTab() == 'events'){
                self.loadEvents();
            } else if (self.detailsTab() == 'sensors'){
                self.loadGraphs();
            }

        }.bind(this);

        this.eqStatusColor = function(eq, param){

            if (eq.monitoring_enable && eq.power_state == 'on'){
                if (eq[param] == 'ok'){
                    return 'green';
                } else if (eq[param] == 'warn'){
                    return 'orange';
                } else {
                    return 'red';
                }
            } else {
                return '';
            }

        }.bind(this);

        this.eqEventColor = function(level, confirmed){

            if (confirmed === true){
                return '';
            }
            else if (level == 'warn'){
                return 'warning';
            } else if (level != 'info' && level != 'warn'){
                return 'error';
            } else {
                return '';
            }

        };

        this.eventIcon = function(level){
            if (level == 'info'){
                return 'info sign';
            } else if (level == 'warn'){
                return 'warning circle';
            } else {
                return 'warning sign';
            }
        };

        this.monitoringIcon = function(enable){
            return enable ? 'checkmark green' : 'minus';
        };

        this.loadData = function(){
            var self = this;

            self.loading(true);

            var dcQuery = {sort: 'name'};

            io.socket.get('/datacenter', dcQuery, function(data, jwr){
                if (jwr.statusCode == 200){
                    var dcs = [];
                    if (data !== undefined && data.length > 0){
                        _.forEach(data, function(item){
                            item.errors = ko.observable(0);
                            item.warning = ko.observable(0);
                            dcs.push(ko.observable(item));
                            if (self.selectedDc() === false){
                                self.selectDc(item);
                            }
                        });
                    }

                    self.dcs(dcs);
                } else if (jwr.statusCode == 401){
                    window.location.href = "/login";
                } else {
                    self.errors.push('ERROR: ' + jwr.statusCode);
                }
            });


        }.bind(this);

        self.loadData();

        io.socket.on('connect', function(){
            io.socket.get('/equipment');
            io.socket.get('/notifications/subscribe/statusUpdates');
        });

        io.socket.on('statusUpdates',function(obj){
          if (obj.verb == 'updated') {
            var previous = obj.previous;
            var data = obj.data;
            console.log(obj);
          } else if (obj.verb == 'messaged') {
            console.log(obj);
          } else {
            console.log(obj);
          }
        });
    };

    ko.applyBindings(new monitorEqViewModel(), document.getElementById("monitorPage"));
</script>
