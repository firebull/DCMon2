<div id="usersControlPage">
    <h3 class="ui left floated header">
        <i class="users icon"></i>
        <div class="content">
            <%= __('Users list') %>
        </div>
    </h3>

    <button class="ui right floated small orange button" data-bind="event: {click: userForm.bind(false, false)}">
        <i class="add user icon"></i>
        <%= __('New User') %>
    </button>

    <table class="ui padded table" id="usersListTable">
        <thead>
            <tr>
                <th>ID</th>
                <th><%= __('Login') %></th>
                <th><%= __('Name') %></th>
                <th><%= __('Last name') %></th>
                <th><%= __('E-mail') %></th>
                <th><%= __('Group') %></th>
                <th></th>
            </tr>
        </thead>
        <tbody data-bind="foreach: {data: users, as: 'user'}">
            <tr>
                <td data-bind="text: user.id"></td>
                <td data-bind="text: user.username"></td>
                <td data-bind="text: user.first_name"></td>
                <td data-bind="text: user.last_name"></td>
                <td data-bind="text: user.email"></td>
                <td data-bind="text: user.group.description"></td>
                <td>
                    <button data-bind="event: {click: $root.userDelete.bind($data)}"class="ui small red right floated button"><%= __('Delete') %></button>
                    <button data-bind="event: {click: $root.userForm.bind(false, $index())}" class="ui small primary right floated button"><%= __('Edit') %></button>
                </td>
            </tr>
        </tbody>
    </table>
    <div class="ui small modal" id="userEditModal">
        <i class="close icon"></i>
        <div class="header"></div>
        <div class="content" data-bind="if: modalData && modalTemplate">
            <div class="description" data-bind="template: {data: modalData,
                                                           name: modalTemplate}"></div>
        </div>
        <div class="actions">
            <div class="ui button"><%= __('Cancel') %></div>
        </div>
    </div>
</div>

<script type="text/html" id="user-form">
    <div class="ui form" data-bind="css: {'error': $root.modalErrors().length > 0}">
        <!-- ko template: 'form-errors'-->
        <!-- /ko -->
        <div class="required field">
            <label><%= __('User login') %></label>
            <input type="text" data-bind="value: $root.modalData().username" placeholder="<%= __('Example: superuser') %>"/>
        </div>
        <div class="field">
            <label><%= __('First name') %></label>
            <input type="text" data-bind="value: $root.modalData().first_name" placeholder="<%= __('Example: Ronnie') %>"/>
        </div>
        <div class="field">
            <label><%= __('Last name') %></label>
            <input type="text" data-bind="value: $root.modalData().last_name" placeholder="<%= __('Example: Dio') %>"/>
        </div>
        <div class="required field">
            <label><%= __('e-mail') %></label>
            <input type="email" data-bind="value: $root.modalData().email" placeholder="<%= __('Example: root@example.com') %>"/>
        </div>
        <div class="required field">
            <label><%= __('Password') %></label>
            <input type="password" data-bind="value: $root.modalData().password"/>
        </div>
        <div class="required field">
            <label><%= __('Group') %></label>
            <select data-bind="options: $root.userGroupsList(),
                               optionsText: function(item){ return '#' + item.id + ' ' + item.description},
                               optionsValue: function(item){ return item.id},
                               value: $root.modalData().group.id,
                               optionsCaption: '<%= __('Choose one...') %>'"></select>
        </div>
        <button class="ui primary fluid button" data-bind="event: {click: $root.sendForm.bind(false, 'datacenter')}"><%= __('Send') %></button>
    </div>
</script>
<script type="text/html" id="form-errors">
    <div class="ui error message">
        <div class="header"><%= __('Error occured while request') %></div>
        <ul data-bind="foreach: {data: $root.modalErrors, as: 'error'}">
            <li data-bind="text: error"></li>
        </ul>
    </div>
</script>
<script type="text/javascript">

    var configUserViewModel = function(){
        var self = this;

        this.errors = ko.observableArray();
        this.modalErrors = ko.observableArray();
        this.loading = ko.observable(false);
        this.modalTemplate = ko.observable(false);
        this.modalData = ko.observable(false);
        this.modalDataIndex = ko.observable(false);
        this.confirmActions = ko.observable(true);

        this.users = ko.observableArray();

        this.userGroupsList = ko.observableArray();

        this.userForm = function(id){
            var self = this;
            var title;

            if (id === false){
                title = "<%= __('Add new User') %>";
                var fields = { username   : "",
                               first_name : "",
                               last_name  : "",
                               group      : {id: undefined}};

                self.modalData(fields);
            } else {
                title = "<%= __('Update RackMount') %>";

                self.modalData(self.users()[id]());
                self.modalDataIndex(id);
            }

            self.showModal('small', title, "user-form");
        }.bind(this);

        this.sendForm = function(url){
            var self = this;

            if (self.modalData() !== false){
                self.modalErrors([]);

                // Prepare data
                var dataToSave;

                dataToSave = ko.toJS(self.modalData());

                dataToSave.username = dataToSave.username.toLowerCase();
                dataToSave.group = self.modalData().group.id;
                dataToSave.protocol = 'local';

                if (self.modalData().id === undefined){
                    // Create
                    io.socket.put('/user/create', dataToSave, function(data, jwr){

                        if (jwr.statusCode == 201){

                            self.users.push(ko.observable(data));

                            $('#userEditModal').modal('hide');
                        } else {

                            self.parseErrors(jwr, data);
                        }
                    });
                } else {
                    // Update
                    updateUrl = '/user/update/' + self.modalData().id;
                    io.socket.put(updateUrl, dataToSave, function(data, jwr){
                        if (jwr.statusCode == 200){
                            var index = self.modalDataIndex();

                            self.users()[index](data);

                            $('#userEditModal').modal('hide');
                        } else {
                            console.log(jwr);
                            self.parseErrors(jwr, data);
                        }
                    });
                }
            }

        }.bind(this);

        // Confirmation for delete action
        this.userDelete = function(user){
            var self = this;

            if (self.confirmActions() === true){
                swal({  title: "<%= __('Delete this User?') %>",
                        text: "   <div class='ui checkbox'><input type='checkbox'  id='dontConfirmCheck'/><label for='dontConfirmCheck'><%= __('Do not ask me more (until this window refreshed)') %></label> </div>",
                        type: "warning",
                        confirmButtonText: "<%= __('Yes, delete him') %>",
                        cancelButtonText: "<%= __('Cancel') %>",
                        html: true,
                        showCancelButton: true },
                    function(){
                        if ($('#dontConfirmCheck').prop('checked')){
                            self.confirmActions(false);
                        }

                        self.userDeleteAction(user);
                    });
            } else {
                self.userDeleteAction(user);
            }
        }.bind(this);

        this.userDeleteAction = function(user){
            var self = this;

            io.socket.delete('/user/' + user.id, function(answer, jwr){
                if (jwr.statusCode == 200){
                    self.users.remove(function(item){return item().id == user.id;});
                } else if (jwr.statusCode == 400 && answer.errors !== undefined){
                    self.errors.push(answer.errors);
                } else {
                    self.errors.push('ERROR: ' + jwr.statusCode);
                }
            });

        }.bind(this);

        this.parseErrors = function(jwr, data){
            var self = this;

            if (jwr.error !== undefined){
                if (jwr.error.error !== undefined){
                        if (jwr.error.error == 'E_VALIDATION'){
                            self.modalErrors.push(jwr.error.summary);
                            $.each(jwr.error.invalidAttributes, function(field, item){
                                self.modalErrors.push(field + ': ' + item[0].message);
                            });
                        }
                } else if (jwr.error.errors !== undefined){
                    _.forEach(jwr.error.errors, function(error){
                        self.modalErrors.push(error);
                    });
                } else {
                    // TODO: Test other errors
                    self.modalErrors.push('ERROR: ' + jwr.statusCode);
                }
            } else {
                self.modalErrors.push('ERROR: ' + jwr.statusCode);
            }

        }.bind(this);

        this.loadData = function(){
            var self = this;
            var userQuery = {sort: 'username'};

            io.socket.get('/user', userQuery, function(data, jwr){
                if (jwr.statusCode == 200){
                    var users = [];

                    if (data !== undefined && data.length > 0){
                        _.forEach(data, function(item){
                            users.push(ko.observable(item));
                        });
                    }

                    self.users(users);
                } else if (jwr.statusCode == 403){
                    window.location.href = "/login";
                } else {
                    self.errors.push('ERROR: ' + jwr.statusCode);
                }
            });

            io.socket.get('/group/list', function(data, jwr){
                if (jwr.statusCode == 200){

                    if (data.groups !== undefined && data.groups.length > 0){
                        self.userGroupsList(data.groups);
                    }
                } else if (jwr.statusCode == 403){
                    window.location.href = "/login";
                } else {
                    self.errors.push('ERROR: ' + jwr.statusCode);
                }
            });
        }.bind(this);

        self.loadData();

        this.showModal = function(size, title, template){
            var self = this;

            $('#userEditModal').removeClass('small large fullscreen').addClass(size);
            $('#userEditModal .header').html(title);

            self.modalTemplate(template);

            $('#userEditModal').modal({onHide: function(){
                                        self.modalTemplate(false);
                                        self.modalData(false);
                                        self.modalDataIndex(false);
                                        }
                                }).modal('show').modal('refresh');

            self.loading(false);

        }.bind(this);

    };

    ko.applyBindings(new configUserViewModel(), document.getElementById("usersControlPage"));

</script>
